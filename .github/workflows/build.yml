name: build-and-deploy

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
    {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Preflight: Validate OpenRouter API key
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          set -e
          echo "üîé Preflight check: validating OPENROUTER_API_KEY"
          python -m src.tools.env_diagnose --check || true
          python -m src.tools.env_diagnose --validate || {
            echo "‚ùå OPENROUTER_API_KEY invalid or missing ‚Äî failing early"
            exit 1
          }
      - name: Run tests
        run: pytest -q
      - name: Build site
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          BRIGHTDATA_API_KEY: ${{ secrets.BRIGHTDATA_API_KEY }}
          BRIGHTDATA_ZONE: ${{ secrets.BRIGHTDATA_ZONE }}
        run: |
          set -e
          echo "üöÄ Starting build process..."
          
          # Attempt ChinaXiv harvest via BrightData if credentials provided
          if [ -n "${BRIGHTDATA_API_KEY}" ] && [ -n "${BRIGHTDATA_ZONE}" ]; then
            echo "üì• Harvesting from ChinaXiv (BrightData)‚Ä¶"
            CURR=$(date -u +"%Y%m")
            PREV=$(date -u -d "-1 month" +"%Y%m")
            echo "   Current month: $CURR"
            echo "   Previous month: $PREV"
            python -m src.harvest_chinaxiv_optimized --month "$CURR" || echo "‚ö†Ô∏è Harvest current month failed; continuing"
            python -m src.harvest_chinaxiv_optimized --month "$PREV" || echo "‚ö†Ô∏è Harvest previous month failed; continuing"
          else
            echo "‚ÑπÔ∏è BrightData credentials not set; skipping harvest"
          fi
          echo "üîç Preparing records for selection..."
          PYTHONIOENCODING=utf-8 python - <<'PY'
import os, json, glob
os.makedirs('data/records', exist_ok=True)
curr = os.popen("date -u +%Y%m").read().strip()
try:
    prev = os.popen("date -u -d '-1 month' +%Y%m").read().strip()
except Exception:
    prev = ''
paths = []
for ym in (curr, prev):
    if not ym:
        continue
    p = f"data/records/chinaxiv_{ym}.json"
    if os.path.exists(p):
        paths.append(p)
merged = []
for p in paths:
    try:
        with open(p, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, list):
                merged.extend(data)
    except Exception as e:
        pass
outp = 'data/records/_merged_current_prev.json'
with open(outp, 'w', encoding='utf-8') as f:
    json.dump(merged, f, ensure_ascii=False)
print(f"Merged {len(paths)} record files ‚Üí {outp} with {len(merged)} items")
PY

          echo "üìã Selecting new items (no limit)..."
          if [ -f data/records/_merged_current_prev.json ]; then
            python -m src.select_and_fetch --records data/records/_merged_current_prev.json --output data/selected.json || {
              echo "‚ö†Ô∏è Record selection failed, using empty selection";
              echo '[]' > data/selected.json;
            }
          else
            echo "‚ö†Ô∏è No records found to select";
            echo '[]' > data/selected.json;
          fi
          
          # Translate
          echo "üåê Running translation pipeline..."
          python -m src.pipeline --skip-selection --workers 20 || {
            echo "‚ö†Ô∏è Translation failed, continuing with existing translations"
          }
          
          # Render site
          echo "üé® Rendering site..."
          python -m src.render || {
            echo "‚ùå Site rendering failed"
            exit 1
          }
          
          echo "üîç Building search index..."
          python -m src.search_index || {
            echo "‚ùå Search index failed"
            exit 1
          }
          
          echo "üìÑ Generating PDFs..."
          python -m src.make_pdf || {
            echo "‚ö†Ô∏è PDF generation failed, continuing without PDFs"
          }
          
          echo "‚úÖ Build completed successfully!"
      - name: Persist dedupe state (seen.json)
        run: |
          set -e
          if [ ! -f data/seen.json ]; then
            echo "No seen.json to persist; skipping"
            exit 0
          fi
          echo "üîí Persisting data/seen.json..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/seen.json || true
          if git diff --cached --quiet; then
            echo "No changes in seen.json"
          else
            git commit -m "chore(dedupe): update seen.json [skip ci]" || true
            git push || echo "‚ö†Ô∏è Push failed (non-fatal)"
          fi
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          set -e
          echo "üöÄ Deploying to Cloudflare Pages..."
          
          echo "üì¶ Installing Wrangler CLI..."
          npm install -g wrangler || {
            echo "‚ùå Failed to install Wrangler"
            exit 1
          }
          
          echo "üåê Deploying site..."
          wrangler pages deploy site --project-name chinaxiv-english || {
            echo "‚ùå Deployment failed"
            exit 1
          }
          
          echo "‚úÖ Deployment completed successfully!"
