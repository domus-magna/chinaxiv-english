name: backfill-month

on:
  workflow_dispatch:
    inputs:
      month:
        description: 'Month to backfill (YYYYMM)'
        required: true
      workers:
        description: 'Parallel translation workers'
        required: false
        default: '20'
      deploy:
        description: 'Deploy site after backfill (true/false)'
        required: false
        default: 'true'

jobs:
  backfill:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Preflight: Validate OpenRouter API key
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          set -e
          echo "üîé Preflight check: validating OPENROUTER_API_KEY"
          python -m src.tools.env_diagnose --check || true
          python -m src.tools.env_diagnose --validate || {
            echo "‚ùå OPENROUTER_API_KEY invalid or missing ‚Äî failing early"
            exit 1
          }
      - name: Backfill month
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          BRIGHTDATA_API_KEY: ${{ secrets.BRIGHTDATA_API_KEY }}
          BRIGHTDATA_ZONE: ${{ secrets.BRIGHTDATA_ZONE }}
        run: |
          set -e
          echo "üöÄ Backfill for month: ${{ inputs.month }}"
          
          REC="data/records/chinaxiv_${{ inputs.month }}.json"
          if [ -f "$REC" ]; then
            echo "üìÑ Found existing records: $REC ‚Äî skipping harvest"
          else
            if [ -z "${BRIGHTDATA_API_KEY}" ] || [ -z "${BRIGHTDATA_ZONE}" ]; then
              echo "‚ùå BrightData credentials are required for backfill (no existing $REC)"
              exit 1
            fi
            echo "üì• Harvesting (optimized) for ${{ inputs.month }}..."
            python -m src.harvest_chinaxiv_optimized --month "${{ inputs.month }}" || {
              echo "‚ùå Harvest failed"
              exit 1
            }
            if [ ! -f "$REC" ]; then
              echo "‚ùå Records not found after harvest: $REC"
              exit 1
            fi
          fi
          
          echo "üìã Selecting new items from $REC..."
          python -m src.select_and_fetch --records "$REC" --output data/selected.json || {
            echo "‚ùå Selection failed"
            exit 1
          }
          
          echo "üåê Translating (workers=${{ inputs.workers }})..."
          python -m src.pipeline --skip-selection --workers "${{ inputs.workers }}" || {
            echo "‚ùå Pipeline failed"
            exit 1
          }
          echo "‚úÖ Backfill and site build completed for ${{ inputs.month }}"
      - name: Persist dedupe state (seen.json)
        run: |
          set -e
          if [ ! -f data/seen.json ]; then
            echo "No seen.json to persist; skipping"
            exit 0
          fi
          echo "üîí Persisting data/seen.json..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/seen.json || true
          if git diff --cached --quiet; then
            echo "No changes in seen.json"
          else
            git commit -m "chore(dedupe): update seen.json [skip ci]" || true
            git push || echo "‚ö†Ô∏è Push failed (non-fatal)"
          fi
      - name: Deploy to Cloudflare Pages (optional)
        if: ${{ inputs.deploy == 'true' }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          set -e
          echo "üöÄ Deploying to Cloudflare Pages..."
          npm install -g wrangler
          wrangler pages deploy site --project-name chinaxiv-english
          echo "‚úÖ Deployment completed"
